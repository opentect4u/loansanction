   Sign Up Page
   
   {/* {!isshow &&
        <div className='grid grid-cols-2 gap-0'>
          <div className='hidden md:block md:col-span-1'>
            <div className='mt-24 mb-10 bg-white  h-auto w-full text-black p-8 font-semibold text-xl'>
              <img src={`${REGIMG}`} className='h-[412px] w-86' />

            </div>
          </div>
          <div className='md:col-span-1 col-span-2'>
            <div className='mt-24 mb-10 bg-white w-96 h-auto text-gray-600 p-8 font-semibold text-xl'>
              <div className='flex items-center justify-center'>
                <img src={LOGO} className="h-16" alt="Flowbite Logo" />
              </div>


              <form className="max-w-md mx-auto" onSubmit={regformik.handleSubmit}>
                <div className="relative z-0 w-full mb-5 group">
                  <label for="user_id" className="text-sm text-gray-600">User ID</label>
                  <input name="user_id" id="user_id" className="block border-gray-300 text-[13px] p-1 rounded-lg h- w-full border " placeholder="Enter the user ID" required onChange={regformik.handleChange} onBlur={regformik.handleBlur} />
                
                  <label for="user_name" className="text-sm text-gray-600">User Name</label>
                  <input name="user_name" id="user_name" className="block border-gray-300 text-[13px]  p-1 rounded-lg h- w-full border " placeholder="Enter your name" required value={formik.values.user_name} onChange={formik.handleChange} onBlur={formik.handleBlur} />
                
                  <label for="pass" className="text-sm text-gray-600">Password</label>
                  <input name="pass" id="pass" className="block border-gray-300 text-[13px]  p-1 rounded-lg h- w-full border " placeholder="*******" required value={formik.values.pass} onChange={formik.handleChange} onBlur={formik.handleBlur} />
                  <label for="confirm_pass" className="text-sm text-gray-600">Confirm Password</label>
                  <input name="confirm_pass" id="confirm_pass" className="block border-gray-300 text-[13px]  p-1 rounded-lg h- w-full border " placeholder="*******" required value={formik.values.confirm_pass} onChange={formik.handleChange} onBlur={formik.handleBlur} />
                </div>
                <div className='pt-1 pb-1 block text-sm'>
                  <button disabled={!formik.isValid} type="submit" className='bg-green-900 hover:bg-green-800 w-full text-white p-2 rounded-md disabled:bg-green-200'>Sign up</button>
                </div>
              </form>
              <p className='text-sm text-gray-500'>
                Already have an account? <a className='text-sm pl-2 text-green-900 hover:underline cursor-pointer' onClick={showReg}>Login here</a>
              </p>
            </div>
          </div>
        </div>} */}

        sign in

         // <div className='bg-green-800 flex justify-center items-center min-h-screen min-w-screen p-2'>

    //     <div className='grid grid-cols-2 gap-0 h-auto'>
    //       <div className='hidden md:block md:col-span-1'>
    //         <div className='mt-24 mb-10 bg-white  w-full text-black p-8 font-semibold text-xl'>
    //           <img src={`${IMG}`} className='w-96 h-96 rounded-l-lg ' />
    //         </div>
    //       </div>
    //       <div className='md:col-span-1 col-span-2'>
    //         <div className='mt-24 mb-10 bg-white w-96 h-auto text-gray-600 p-8 font-semibold text-xl'>
    //           <div className='flex items-center justify-center'>
    //             <img src={LOGO} className="h-16" alt="Flowbite Logo" />
    //           </div>
    //           <form onSubmit={formik.handleSubmit}>
    //             <div className='pt-6 block'>
    //               <label className="text-sm text-gray-600">Your email</label>
    //               <input type="text" name='email' value={formik.values.email} className="block border-gray-300 text-[13px] pt-2 p-1 rounded-lg h- w-full border focus:border-green-900 active:border-green-900 focus:ring-green-900 focus:border-1 duration-300" placeholder="name@company.com" onChange={formik.handleChange} onBlur={formik.handleBlur} />
    //               {formik.errors.email && formik.touched.email ? <VError title={formik.errors.email}/> : null}
    //             </div>
    //             <div className='pt-6 block'>
    //               <label className="text-sm text-gray-600">Your password</label>
    //               <input type="password" name='password' value={formik.values.password} className="block border-gray-300 text-[13px] pt-1 p-1 rounded-lg h- w-full border  focus:border-green-900 active:border-green-900 focus:ring-green-900 focus:border-1 duration-300" placeholder="*******" onChange={formik.handleChange} onBlur={formik.handleBlur} />
    //               {formik.errors.password && formik.touched.password ? <VError title={formik.errors.password}/> : null}
    //             </div>
    //             <div className='pt-2'>
    //               <Link to={routePaths.FORGOTPASS}>
    //                 <p className='text-xs text-gray-500 hover:underline cursor-pointer'>Forgot password?</p>
    //               </Link>
    //             </div>
    //             <div className='pt-5 pb-4 block text-sm'>
    //               <button disabled={!formik.isValid} type="submit" className='bg-green-900 hover:bg-green-800 w-full text-white p-3 rounded-md disabled:bg-green-200'>Login to your account</button>
    //             </div>
    //           </form>

    //         </div>
    //       </div>

    //     </div>

    // </div>

    label
    {/* <LabelTemplate htmlfor={'catnm'} title={'Category name'}/>
                          <input type="text" name="catnm" id="catnm" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  focus:border-green-900 active:border-green-900 focus:ring-green-900 focus:border-1 duration-300 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Type Category name" required="" /> */}

    select 

    {/* <label
                  for="proj_id"
                  className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  Project
                </label> */}
                {/* <Select
                  showSearch
                className="bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 "

                  placeholder="Select a project"
                  optionFilterProp="label"
                  onChange={onChange}
                  onSearch={onSearch}
                  size={'large'}
                  options={[
                    {
                      value: "jack",
                      label: "Jack",
                    },
                    {
                      value: "lucy",
                      label: "Lucy",
                    },
                    {
                      value: "tom",
                      label: "Tom",
                    },
                  ]}
                /> */}




 <StepperPanel header="Status">
                                <form onSubmit={formikStatus.handleSubmit}>

                                    <div className="grid gap-4 sm:grid-cols-2 sm:gap-6">
                                        {/* <div className='flex gap-4 items-center sm:mt-6'>
                                            <label className="block mb-2 text-sm font-bold text-green-900 dark:text-gray-100">Warranty</label>
                                            <Switch name="warranty_check" size="large"
                                                formControlName={formikStatus.values.warranty_check}
                                                onChange={value => formikStatus.setFieldValue('warranty_check', value)}
                                                checked={formikStatus.values.warranty_check === 'Y'}
                                                onChange={value => formikStatus.setFieldValue('warranty_check', value ? 'Y' : 'N')}
                                                onBlur={formikStatus.handleBlur}
                                                handleBlur={formikStatus.handleBlur}
                                            />
                                        </div> */}
                                        <div className='sm:col-span-2'>
                                            <TDInputTemplate
                                                placeholder="Select project status..."
                                                type="text"
                                                label="Project Status"
                                                name="proj_sts"
                                                formControlName={formikStatus.values.proj_sts}
                                                handleChange={formikStatus.handleChange}
                                                handleBlur={formikStatus.handleBlur}
                                                data={statusList}
                                                mode={2}

                                            />
                                        </div>
                                        <div className="sm:col-span-2">
                                            <TDInputTemplate
                                                placeholder="Type status remarks"
                                                type="text"
                                                label="Status remarks"
                                                name="sts_remarks"
                                                formControlName={formikStatus.values.sts_remarks}
                                                handleChange={formikStatus.handleChange}
                                                handleBlur={formikStatus.handleBlur}
                                                mode={3}
                                            />
                                        </div>
                                        <div className="sm:col-span-2">
                                            <TDInputTemplate
                                                placeholder=""
                                                type="file"
                                                label="Handover certificate"
                                                name="handovr_cer"
                                                formControlName={formikStatus.values.handovr_cer}
                                                handleChange={formikStatus.handleChange}
                                                handleBlur={formikStatus.handleBlur}
                                                mode={1}
                                            />
                                        </div>
                                    </div>
                                  
                                    {/* <div className="flex justify-end">
                </div> */}
                </form>
                                </StepperPanel>





/vendor orders/////////////////////////////////////////////////////////////

 <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
     <div className="flex flex-col p-1 bg-green-900 rounded-full my-3 dark:bg-[#22543d] md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 ">
              <div className="w-full">
                <div className="flex items-center justify-between">
                  <motion.h2 initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1, type: 'just' }} className="text-xl w-48 capitalize text-nowrap font-bold text-white dark:text-white sm:block hidden mx-5">
                    Vendor Orders
                  </motion.h2>

                  <label for="simple-search" className="sr-only">
                    Search
                  </label>
                  <div className="relative w-full -right-6 2xl:-right-12">
                    <div className="absolute inset-y-0 left-0 flex items-center md:ml-4 pl-3 pointer-events-none">
                      <svg
                        aria-hidden="true"
                        className="w-5 h-5 text-gray-500 dark:text-gray-400"
                        fill="currentColor"
                        viewbox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                          clip-rule="evenodd" />
                      </svg>
                    </div>
                    <motion.input
                      type="text"
                      id="simple-search"
                      initial={{ opacity: 0, width: 0 }} animate={{ opacity: 1, width: '95%' }} transition={{ delay: 1.1, type: 'just' }}
                      className="bg-white border rounded-full border-emerald-500 text-gray-800 text-sm  block w-full  pl-10 dark:bg-gray-800 md:ml-4  duration-300 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="Search"
                      required=""
                      onChange={(text) => setSearch(text.target.value)}
                       />
                  </div>
                  {/* {btnText &&  <motion.div  initial={{opacity:0,y:50}} animate={{opacity:1,y:0}} transition={{delay:1.3, type:'just'}} className="w-full hidden md:block  md:w-auto sm:flex sm:flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                <Tooltip title={btnText}>
                  <Link to={to+0}
                    type="submit"
                   className="flex items-center justify-center text-green-900 bg-white hover:bg-primary-800  font-medium rounded-full transition ease-in-out hover:-translate-x-1 hover:scale-110 text-sm px-4 py-2 dark:bg-gray-800 dark:text-white dark:hover:bg-primary-700 focus:outline-none  hover:duration-500 hover:shadow-lg dark:focus:ring-primary-800 "
                  
    
                  >
                    <AddIcon /> {btnText}
                  </Link>
                </Tooltip>
              </motion.div>} */}
                  {/* <div className='p-1'>
                    <Dropdown menu={{ items }} placement="bottomLeft" arrow>
                      <MoreOutlined className='flex items-center justify-center  text-white   rounded-full  text-3xl font-bold px-2 h-10 w-10 py-2 dark:text-white focus:outline-none  transition duration-0 hover:duration-500 dark:focus:ring-primary-800' />
                    </Dropdown>

                  </div> */}
                </div>
              </div>
            </div>
            </motion.section>



             {!loading &&  
   <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
  <table class="w-full text-sm text-left rtl:text-right shadow-lg text-green-900dark:text-gray-400">
        <thead class=" text-md  text-gray-700 capitalize   bg-[#C4F1BE] dark:bg-gray-700 dark:text-gray-400">
            <tr >
                <th scope="col" class="p-4">
                    #
                </th>
                <th scope="col" class="p-4">
                    PO No.
                </th>
                <th scope="col" class="p-4">
                    Date
                </th>
                <th scope="col" class="p-4">
                    Vendor 
                </th>
                <th scope="col" class="p-4">
                    Project 
                </th>
                <th scope="col" class="p-4">
                    Status 
                </th>
                <th scope="col" class="p-4">
                    Created By 
                </th>
                <th scope="col" class="p-4">
                    Action 
                </th>
            </tr>
        </thead>
        <tbody>
           {po_data && po_data?.slice(first,rows+first).map(item=> 
           <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                <th scope="row" class="px-3 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    {item.serial_number}
                </th>
                <td class="px-6 py-4">
                    {item.po_no}
                    <p className="text-[10.5px] text-gray-500 italic">
                      {item.modified_at==null ? <span> Created {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>:<span> Modified {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>

}
                      </p>
                </td>
                <td class="px-6 py-4">
                    {item.po_issue_date}
                </td>
                <td class="px-6 py-4">
                    {item.vendor_name}
                </td>
                <td class="px-6 py-4">
                    {item.proj_name}
                    {/* {item.fresh_flag} */}
                </td>
                <td class="px-6 py-4">
                    {item.po_status=='P'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<SyncOutlined spin />} color="processing">In Progress<Tooltip title="Draft saved"> <FileTextOutlined className="text-red-500 ml-7" /></Tooltip> </Tag>:(item.po_status=='A'? <Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Approved</Tag>:(item.po_status=='U'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<ClockCircleOutlined className="animate-pulse"/>} color="error">Pending Approval</Tag>:(item.po_status=='D'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Delivered</Tag>:<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success"> Partially Delivered </Tag>)))}
                </td>
                <td class="px-6 py-4">
                    {item.created_by}
                </td>
                <td class="px-6 py-4">
                  <Link to={routePaths.PURCHASEORDERFORM+'F/'+item.sl_no}>
                <EditOutlined className="text-md text-green-900" />
                </Link>
                </td>
            </tr>
           )}
             {/* <Paginator className="w-full" first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onPageChange} /> */}
        </tbody>
        
    </table>
    <Paginator first={first} rows={rows} totalRecords={po_data?.length} rowsPerPageOptions={[3,5,10, 15, 20, 30,po_data?.length ]} onPageChange={onPageChange} />
    </motion.section>
    }


    ////existing orders

      {copy.length>0 &&  
        <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
     <div className="flex flex-col p-1 text-green-900 bg-green-900 rounded-full my-3 dark:bg-[#22543d] md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 ">
                <div className="w-full">
             
                  <div className="flex items-center justify-between">
                    <motion.h2 initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1, type: 'just' }} className="text-xl w-48 capitalize text-nowrap font-bold text-white dark:text-white sm:block hidden mx-5">
                      Existing Orders
                    </motion.h2>
  
                    <label for="simple-search" className="sr-only">
                      Search
                    </label>
                    <div className="relative w-full -right-6 2xl:-right-12">
                      <div className="absolute inset-y-0 left-0 flex items-center md:ml-4 pl-3 pointer-events-none">
                        <svg
                          aria-hidden="true"
                          className="w-5 h-5 text-gray-500 dark:text-gray-400"
                          fill="currentColor"
                          viewbox="0 0 20 20"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                            clip-rule="evenodd" />
                        </svg>
                      </div>
                      <motion.input
                        type="text"
                        id="simple-search"
                        initial={{ opacity: 0, width: 0 }} animate={{ opacity: 1, width: '95%' }} transition={{ delay: 1.1, type: 'just' }}
                        className="bg-white border rounded-full border-green-900 text-gray-800 text-sm  block w-full  pl-10 dark:bg-gray-800 md:ml-4  duration-300 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                        placeholder="Search"
                        required=""
                        onChange={(text) => setSearch(text.target.value)}
                         />
                    </div>
                    {/* {btnText &&  <motion.div  initial={{opacity:0,y:50}} animate={{opacity:1,y:0}} transition={{delay:1.3, type:'just'}} className="w-full hidden md:block  md:w-auto sm:flex sm:flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                  <Tooltip title={btnText}>
                    <Link to={to+0}
                      type="submit"
                     className="flex items-center justify-center text-green-900 bg-white hover:bg-primary-800  font-medium rounded-full transition ease-in-out hover:-translate-x-1 hover:scale-110 text-sm px-4 py-2 dark:bg-gray-800 dark:text-white dark:hover:bg-primary-700 focus:outline-none  hover:duration-500 hover:shadow-lg dark:focus:ring-primary-800 "
                    
      
                    >
                      <AddIcon /> {btnText}
                    </Link>
                  </Tooltip>
                </motion.div>} */}
                    {/* <div className='p-1'>
                      <Dropdown menu={{ items }} placement="bottomLeft" arrow>
                        <MoreOutlined className='flex items-center justify-center  text-white   rounded-full  text-3xl font-bold px-2 h-10 w-10 py-2 dark:text-white focus:outline-none  transition duration-0 hover:duration-500 dark:focus:ring-primary-800' />
                      </Dropdown>
  
                    </div> */}
                  </div>
                </div>
              </div>
              </motion.section>}


       <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
      <table class="w-full text-sm text-left rtl:text-right shadow-lg text-green-900 dark:text-gray-400">
          <thead class=" text-md  text-gray-700 capitalize   bg-[#C4F1BE] dark:bg-gray-700 dark:text-gray-400">
              <tr >
                  <th scope="col" class="p-4">
                      #
                  </th>
                  <th scope="col" class="p-4">
                      PO No.
                  </th>
                  <th scope="col" class="p-4">
                      Date
                  </th>
                  <th scope="col" class="p-4">
                      Vendor 
                  </th>
                  <th scope="col" class="p-4">
                      Project 
                  </th>
                  <th scope="col" class="p-4">
                      Status 
                  </th>
                  <th scope="col" class="p-4">
                      Created By 
                  </th>
                  <th scope="col" class="p-4">
                      Action 
                  </th>
              </tr>
          </thead>
          <tbody>
             {po_data?.slice(first,rows+first).map(item=> 
             <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                  <th scope="row" class="px-3 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                      {item.serial_number}
                  </th>
                  <td class="px-6 py-4">
                      {item.po_no}
                      <p className="text-[10.5px] text-gray-500 italic">
                      {item.modified_at==null ? <span> Created {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>:<span> Modified {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>

}
                      </p>
                  </td>
                  <td class="px-6 py-4">
                      {item.po_issue_date}
                  </td>
                  <td class="px-6 py-4">
                      {item.vendor_name}
                  </td>
                  <td class="px-6 py-4">
                      {item.proj_name}
                      {/* {item.fresh_flag} */}
                  </td>
                  <td class="px-6 py-4">
                    {item.po_status=='P'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<SyncOutlined spin />} color="processing">In Progress<Tooltip title="Draft saved"> <FileTextOutlined className="text-red-500 ml-7" /></Tooltip> </Tag>:(item.po_status=='A'? <Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Approved</Tag>:(item.po_status=='U'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<ClockCircleOutlined className="animate-pulse"/>} color="error">Pending Approval</Tag>:(item.po_status=='D'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Delivered</Tag>:<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success"> Partially Delivered </Tag>)))}
                </td>
                  <td class="px-6 py-4">
                      {item.created_by}
                  </td>
                  <td class="px-6 py-4">
                    <Link to={routePaths.PURCHASEORDERFORM+'E/'+item.sl_no}>
                  <EditOutlined className="text-md text-green-900" />
                  </Link>
                  </td>
              </tr>
             )}
               {/* <Paginator className="w-full" first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onPageChange} /> */}
          </tbody>
          
      </table>
       <Paginator first={first} rows={rows} totalRecords={po_data?.length} rowsPerPageOptions={[3,5,10, 15, 20, 30,po_data?.length ]} onPageChange={onPageChange} />
    
       </motion.section>
//////Approved


<div class="relative overflow-x-auto">
  {!loading &&   
  
  <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
  <table class="w-full text-sm text-left rtl:text-right shadow-lg text-green-900dark:text-gray-400">
        <thead class=" text-md  text-gray-700 capitalize   bg-[#C4F1BE] dark:bg-gray-700 dark:text-gray-400">
            <tr >
                <th scope="col" class="p-4">
                    #
                </th>
                <th scope="col" class="p-4">
                    PO No.
                </th>
                <th scope="col" class="p-4">
                    Date
                </th>
                <th scope="col" class="p-4">
                    Vendor 
                </th>
                <th scope="col" class="p-4">
                    Project 
                </th>
                <th scope="col" class="p-4">
                    Status 
                </th>
                <th scope="col" class="p-4">
                    Created By 
                </th>
                <th scope="col" class="p-4">
                    Action 
                </th>
            </tr>
        </thead>
        <tbody>
           {po_data && po_data?.slice(first,rows+first).map(item=> 
           <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                <th scope="row" class="px-3 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                    {item.serial_number} 
                </th>
                <td class="px-6 py-4">
                    {item.po_no}
                </td>
                <td class="px-6 py-4">
                    {item.po_issue_date}
                </td>
                <td class="px-6 py-4">
                    {item.vendor_name}
                </td>
                <td class="px-6 py-4">
                    {item.proj_name} 
                    {/* {item.fresh_flag} */}
                </td>
                <td class="px-6 py-4">
                    {item.po_status=='P'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<SyncOutlined spin />} color="processing">In Progress<Tooltip title="Draft saved"> <FileTextOutlined className="text-red-500 ml-7" /></Tooltip> </Tag>:(item.po_status=='A'? <Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Approved</Tag>:(item.po_status=='U'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<ClockCircleOutlined className="animate-pulse"/>} color="error">Pending Approval</Tag>:(item.po_status=='D'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Delivered</Tag>:<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success"> Partially Delivered </Tag>)))}
                </td>
                <td class="px-6 py-4">
                    {item.created_by}
                </td>
                <td class="px-6 py-4">
                  <Link to={item.fresh_flag=='Y'?routePaths.PURCHASEORDERFORM+'F/'+item.sl_no:routePaths.PURCHASEORDERFORM+'E/'+item.sl_no}>
                <EditOutlined className="text-md text-green-900" />
                </Link>
                </td>
            </tr>
           )}
             {/* <Paginator className="w-full" first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onPageChange} /> */}
        </tbody>
        
    </table>
    <Paginator first={first} rows={rows} totalRecords={po_data?.length} rowsPerPageOptions={[3,5,10, 15, 20, 30,po_data?.length ]} onPageChange={onPageChange} />
    </motion.section>
    }
    
</div>

////amended orders
{copy.length>0 && 
      <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
      <div className="flex flex-col p-1 text-green-900 bg-green-900 rounded-full my-3 dark:bg-[#22543d] md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 ">
                <div className="w-full">
                
                  <div className="flex items-center justify-between">
                    <motion.h2 initial={{ opacity: 0, y: -50 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1, type: 'just' }} className="text-xl w-48 capitalize text-nowrap font-bold text-white dark:text-white sm:block hidden mx-5">
                      Amended Orders
                    </motion.h2>
  
                    <label for="simple-search" className="sr-only">
                      Search
                    </label>
                    <div className="relative w-full -right-6 2xl:-right-12">
                      <div className="absolute inset-y-0 left-0 flex items-center md:ml-4 pl-3 pointer-events-none">
                        <svg
                          aria-hidden="true"
                          className="w-5 h-5 text-gray-500 dark:text-gray-400"
                          fill="currentColor"
                          viewbox="0 0 20 20"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                            clip-rule="evenodd" />
                        </svg>
                      </div>
                      <motion.input
                        type="text"
                        id="simple-search"
                        initial={{ opacity: 0, width: 0 }} animate={{ opacity: 1, width: '95%' }} transition={{ delay: 1.1, type: 'just' }}
                        className="bg-white border rounded-full border-green-900 text-gray-800 text-sm  block w-full  pl-10 dark:bg-gray-800 md:ml-4  duration-300 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                        placeholder="Search"
                        required=""
                        onChange={(text) => setSearch(text.target.value)}
                         />
                    </div>
                    {/* {btnText &&  <motion.div  initial={{opacity:0,y:50}} animate={{opacity:1,y:0}} transition={{delay:1.3, type:'just'}} className="w-full hidden md:block  md:w-auto sm:flex sm:flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                  <Tooltip title={btnText}>
                    <Link to={to+0}
                      type="submit"
                     className="flex items-center justify-center text-green-900 bg-white hover:bg-primary-800  font-medium rounded-full transition ease-in-out hover:-translate-x-1 hover:scale-110 text-sm px-4 py-2 dark:bg-gray-800 dark:text-white dark:hover:bg-primary-700 focus:outline-none  hover:duration-500 hover:shadow-lg dark:focus:ring-primary-800 "
                    
      
                    >
                      <AddIcon /> {btnText}
                    </Link>
                  </Tooltip>
                </motion.div>} */}
                    {/* <div className='p-1'>
                      <Dropdown menu={{ items }} placement="bottomLeft" arrow>
                        <MoreOutlined className='flex items-center justify-center  text-white   rounded-full  text-3xl font-bold px-2 h-10 w-10 py-2 dark:text-white focus:outline-none  transition duration-0 hover:duration-500 dark:focus:ring-primary-800' />
                      </Dropdown>
  
                    </div> */}
                  </div>
                </div>
              </div>
              </motion.section>
              }
  <motion.section initial={{ opacity: 0 }} animate={{ opacity: 1}} transition={{ delay: 0.5, type: 'spring', stiffness: 30}}>
      <table class="w-full text-sm text-left rtl:text-right shadow-lg text-blue-900 dark:text-gray-400">
          <thead class=" text-md  text-gray-700 capitalize   bg-[#C4F1BE] dark:bg-gray-700 dark:text-gray-400">
              <tr >
                  <th scope="col" class="p-4">
                      #
                  </th>
                  <th scope="col" class="p-4">
                      PO No.
                  </th>
                  <th scope="col" class="p-4">
                      Date
                  </th>
                  <th scope="col" class="p-4">
                      Vendor 
                  </th>
                  <th scope="col" class="p-4">
                      Project 
                  </th>
                  {/* <th scope="col" class="p-4">
                      History 
                  </th> */}
                  <th scope="col" class="p-4">
                      Status 
                  </th>
                  <th scope="col" class="p-4">
                      Created By 
                  </th>
                  <th scope="col" class="p-4">
                      
                  </th>
              </tr>
          </thead>
          <tbody>
             {po_data?.slice(first,rows+first).map(item=> 
             <tr class={item.modified_at==null?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))<1800?"bg-[#bdd8b9] border-b dark:bg-gray-800 dark:border-gray-700":"bg-white border-b dark:bg-gray-800 dark:border-gray-700"):(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))<1800?"bg-[#bdd8b9] border-b dark:bg-gray-800 dark:border-gray-700":"bg-white border-b dark:bg-gray-800 dark:border-gray-700")}>
                  <th scope="row" class="px-3 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                      {item.serial_number+' '}
                      {/* {item.created_at} */}
                     
                  </th>
                  <td class="px-6 py-4">
                      {item.po_no}

                      <p className="text-[10.5px] text-gray-500 italic">
                      {item.modified_at==null ? <span> Created {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.created_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>:<span> Modified {" "}
                      {+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))<60?+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000)).toFixed(0)+' seconds ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60<60?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/60).toFixed(0)+' minute(s) ago':+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600<24?(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/3600).toFixed(0)+' hour(s) ago':(+Math.floor(((new Date().getTime() - new Date(item.modified_at).getTime())/1000))/(3600*24)).toFixed(0)+' day(s) ago'}
                       </span>

}
                      </p>
                  </td>
                  <td class="px-6 py-4">
                      {item.po_issue_date}
                  </td>
                  <td class="px-6 py-4">
                      {item.vendor_name}
                  </td>
                  <td class="px-6 py-4">
                      {item.proj_name}
                  </td>
                  {/* <td class="px-6 py-4">
                  <img src={PAPER} className="text-green-900"/>
                  </td> */}
                  <td class="px-6 py-4">
                    {item.po_status=='P'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<SyncOutlined spin />} color="processing">In Progress<Tooltip title="Draft saved"> <FileTextOutlined className="text-red-500 ml-7" /></Tooltip> </Tag>:(item.po_status=='A'? <Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Approved</Tag>:(item.po_status=='U'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<ClockCircleOutlined className="animate-pulse"/>} color="error">Pending Approval</Tag>:(item.po_status=='D'?<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success">Delivered</Tag>:<Tag className="text-[12px] p-1 rounded-full w-36" icon={<CheckCircleOutlined />} color="success"> Partially Delivered </Tag>)))}
                </td>
                  <td class="px-6 py-4">
                      {item.created_by}
                  </td>
                  <td class="px-6 py-4">
                    <Link to={routePaths.PURCHASEORDERFORM+'F/'+item.sl_no}>
                  <EditOutlined className="text-md text-green-900" />
                  </Link>
                  </td>
              </tr>
             )}
               {/* <Paginator className="w-full" first={first} rows={rows} totalRecords={120} rowsPerPageOptions={[10, 20, 30]} onPageChange={onPageChange} /> */}
          </tbody>
          
      </table>
       <Paginator first={first} rows={rows} totalRecords={po_data?.length} rowsPerPageOptions={[3,5,10, 15, 20, 30,po_data?.length ]} onPageChange={onPageChange} />
    
       </motion.section>




       //tc upload form

       <section  className="bg-transparent dark:bg-[#001529]">
          <HeadingTemplate
              text={"Upload test certificate"}
              mode={params.id>0?1:0}
              title={'Category'}
              data={''}
            />
            <div className="grid grid-cols-12 gap-2">
            <div className={'w-full col-span-12 bg-white p-6 rounded-2xl'}>
          <Spin indicator={<LoadingOutlined spin />} size="large" className="text-green-900 dark:text-gray-400" spinning={loading}>
          <div className="grid gap-4 sm:grid-cols-12 sm:gap-6">
          <div className="sm:col-span-12">
              
              <TDInputTemplate
                placeholder="PO No."
                type="text"
                label="PO No."
                name="po_no"
                formControlName={po_no}
                handleChange={txt=>setPoNo(txt.target.value)}
                handleBlur={()=>checkid()}
                disabled={params.id>0}
                mode={1}
              />

{checkLoad &&  <Tag icon={<SyncOutlined spin />} color="processing">Checking...</Tag>}
                    {count==0 && po_no && <VError title={'PO No. does not exist!'} />}
         
              {!po_no ? (
                <VError title={'PO No. is required'} />
              ) : null}
            {count>0 && po_no && <Viewdetails click={()=>{setFlag(14);setVisible(true)}} />}
            </div>
            <div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Test Date"
                type="date"
                label="Test Date"
                name="test_dt"
                formControlName={test_dt}
                handleChange={(txt)=>setTestDt(txt.target.value)}
                // handleBlur={formik.handleBlur}
                mode={1}
              />


              {!test_dt? (
                <VError title={'Date is required'} />
              ) : null}
            </div>
            <div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Test Place"
                type="text"
                label="Test Place"
                name="test_place"
                formControlName={test_place}
                handleChange={txt=>setTestPlace(txt.target.value)}
                // handleBlur={formik.handleBlur}
                mode={1}
              />
              

              {!test_place ? (
                <VError title={'Place is required'} />
              ) : null}
            </div>
            <div className="sm:col-span-4">
              
              <TDInputTemplate
                placeholder="Items"
                type="text"
                label="Items"
                name="item"
                formControlName={item_no}
                handleChange={(e)=>{{setItemNo(e.target.value);onChangeItem(e.target.value)}}}
                // handleBlur={formik.handleBlur}
                mode={2}
                data={itemList}
              />
              

              {!item_no ? (
                <VError title={'Item is required'} />
              ) : null}
            </div>
           
            <div className="sm:col-span-4">
              
              <TDInputTemplate
                placeholder="Quantity"
                type="number"
                label="Quantity"
                name="qty"
                formControlName={qty}
                handleChange={txt=>setQty(txt.target.value)}
                // handleBlur={formik.handleBlur}
                mode={1}
              />
              

              {!qty ? (
                <VError title={'Quantity is required'} />
              ) : null}
            </div>
            <div className="sm:col-span-4">
              
              <TDInputTemplate
                placeholder="Status"
                type="text"
                label="Status"
                name="status"
                formControlName={status}
                handleChange={txt=>setStatus(txt.target.value)}
                mode={2}
                data={[{code:'O',name:"Tested OK"},{code:'D', name:'Defective'}]}
              />
              

              {!status ? (
                <VError title={'Status is required'} />
              ) : null}
            </div>
           
           
            <div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Comments"
                type="file"
                label="Document 1"
                name="doc1"
                // formControlName={doc1}
                handleChange={(txt)=>setDoc1(txt.target.files[0])}
                // handleBlur={formik.handleBlur}
                mode={1}
              />
              

              {!doc1 && !doc2 ? (
                <VError title={'Must upload a file'} />
              ) : null}
            </div>
            <div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Comments"
                type="file"
                label="Document 2"
                name="doc2"
                // formControlName={doc2}
                handleChange={(txt)=>setDoc2(txt.target.files[0])}
                // handleBlur={formik.handleBlur}
                mode={1}
              />
              

              {/* {formik.errors.doc2 && formik.touched.doc2 ? (
                <VError title={formik.errors.doc2} />
              ) : null} */}
            </div>
<div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Test Persons"
                type="text"
                label="Test Persons"
                name="test_person"
                formControlName={test_person}
                handleChange={txt=>setPerson(txt.target.value)}
                // handleBlur={formik.handleBlur}
                mode={3}
              />
              

              {!test_person ? (
                <VError title={'Please enter the persons involved'} />
              ) : null}
            </div>
            <div className="sm:col-span-6">
              
              <TDInputTemplate
                placeholder="Comments"
                type="text"
                label="Comments"
                name="comments"
                formControlName={comments}
                handleChange={txt=>setComments(txt.target.value)}
                // handleBlur={formik.handleBlur}
                mode={3}
              />
              

              {/* {formik.errors.comments && formik.touched.comments ? (
                <VError title={formik.errors.comments} />
              ) : null} */}
            </div>
         
            
          </div>
          <div className="flex justify-center">
          <button onClick={()=>onSubmit()} className=" disabled:bg-gray-400 disabled:dark:bg-gray-400 inline-flex items-center px-5 py-2.5 mt-4 sm:mt-6 text-sm font-medium text-center text-white bg-green-900 transition ease-in-out hover:-translate-y-1 hover:scale-110 duration-300  rounded-full focus:ring-gray-600  dark:focus:ring-primary-900 dark:bg-[#22543d] dark:hover:bg-gray-600">Submit</button>
         
          </div>
        </Spin>
      </div>
 
            </div>
         
      <DialogBox
        visible={visible}
        flag={flag}
        id={id}
        onPress={() => setVisible(false)}
        onDelete={()=>deleteItem()}
      />
    </section>